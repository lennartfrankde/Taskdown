name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [closed]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    env:
      COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
      COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
      COOLIFY_PROJECT_ID: ${{ secrets.COOLIFY_PROJECT_ID }}
      REGISTRY: registry.serverfrank.de
      PR_NUMBER: ${{ github.event.number }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        run: |
          set -e
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin || {
            echo "‚ùå Docker login failed!"
            exit 1
          }

      - name: Build and push PR image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/taskdown:pr-${{ env.PR_NUMBER }}

      - name: Deploy or update preview app in Coolify (with error logging)
        env:
          LANG: C.UTF-8
        run: |
          set -euo pipefail
          PREVIEW_NAME="taskdown-pr-${PR_NUMBER}"
          IMAGE_TAG="pr-${PR_NUMBER}"
          IMAGE="${REGISTRY}/taskdown:${IMAGE_TAG}"

          echo "Fetching existing dockerimage applications for project..."
          APPS=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            "${COOLIFY_API_URL}/api/v1/projects/${COOLIFY_PROJECT_ID}/dockerimage-applications")

          HTTP_STATUS=$(echo "$APPS" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          RESPONSE_BODY=$(echo "$APPS" | sed -e 's/HTTP_STATUS:.*//g')

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to fetch dockerimage applications. Status: $HTTP_STATUS"
            echo "Response body:"
            echo "$RESPONSE_BODY"
            exit 1
          fi

          echo "Applications response:"
          echo "$RESPONSE_BODY"

          APP_ID=$(echo "$RESPONSE_BODY" | jq -r --arg name "$PREVIEW_NAME" '.[] | select(.name==$name) | .id // empty')

          if [ -z "$APP_ID" ]; then
            echo "Creating new Coolify Docker Image Application: $PREVIEW_NAME"
            CREATE_RESP=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "${COOLIFY_API_URL}/api/v1/dockerimage-applications" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"${PREVIEW_NAME}\",\"image\":\"${IMAGE}\",\"preview\":true,\"forcePullImage\":true,\"projectId\":\"${COOLIFY_PROJECT_ID}\"}")

            CREATE_STATUS=$(echo "$CREATE_RESP" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            CREATE_BODY=$(echo "$CREATE_RESP" | sed -e 's/HTTP_STATUS:.*//g')

            if [ "$CREATE_STATUS" -ne 201 ]; then
              echo "‚ùå Failed to create application. Status: $CREATE_STATUS"
              echo "Response body:"
              echo "$CREATE_BODY"
              exit 1
            fi

            APP_ID=$(echo "$CREATE_BODY" | jq -r '.id')
          else
            echo "Updating existing Coolify Docker Image Application: $PREVIEW_NAME"
            UPDATE_RESP=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X PATCH "${COOLIFY_API_URL}/api/v1/dockerimage-applications/${APP_ID}" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"image\":\"${IMAGE}\",\"preview\":true,\"forcePullImage\":true}")

            UPDATE_STATUS=$(echo "$UPDATE_RESP" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            UPDATE_BODY=$(echo "$UPDATE_RESP" | sed -e 's/HTTP_STATUS:.*//g')

            if [ "$UPDATE_STATUS" -ne 200 ]; then
              echo "‚ùå Failed to update application. Status: $UPDATE_STATUS"
              echo "Response body:"
              echo "$UPDATE_BODY"
              exit 1
            fi
          fi

          echo "Trigger deployment for application $APP_ID with tag $IMAGE_TAG"
          DEPLOY_RESP=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "${COOLIFY_API_URL}/api/v1/dockerimage-applications/deploy" \
            -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"applicationId\":\"${APP_ID}\",\"tag\":\"${IMAGE_TAG}\"}")

          DEPLOY_STATUS=$(echo "$DEPLOY_RESP" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          DEPLOY_BODY=$(echo "$DEPLOY_RESP" | sed -e 's/HTTP_STATUS:.*//g')

          if [ "$DEPLOY_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to trigger deployment. Status: $DEPLOY_STATUS"
            echo "Response body:"
            echo "$DEPLOY_BODY"
            exit 1
          fi

          echo "Deployment triggered successfully."

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployment created! View it at: https://pr-${context.issue.number}.your-domain.com`
            })

  cleanup-preview:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    env:
      COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
      COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
      COOLIFY_PROJECT_ID: ${{ secrets.COOLIFY_PROJECT_ID }}
      PR_NUMBER: ${{ github.event.number }}

    steps:
      - name: Delete preview app from Coolify (with error logging)
        env:
          LANG: C.UTF-8
        run: |
          set -euo pipefail
          PREVIEW_NAME="taskdown-pr-${PR_NUMBER}"

          APPS=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            "${COOLIFY_API_URL}/api/v1/projects/${COOLIFY_PROJECT_ID}/dockerimage-applications")

          HTTP_STATUS=$(echo "$APPS" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          RESPONSE_BODY=$(echo "$APPS" | sed -e 's/HTTP_STATUS:.*//g')

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to fetch dockerimage applications. Status: $HTTP_STATUS"
            echo "Response body:"
            echo "$RESPONSE_BODY"
            exit 1
          fi

          APP_ID=$(echo "$RESPONSE_BODY" | jq -r --arg name "$PREVIEW_NAME" '.[] | select(.name==$name) | .id // empty')

          if [ -n "$APP_ID" ]; then
            echo "Deleting Coolify Docker Image Application: $PREVIEW_NAME (ID: $APP_ID)"
            DEL_RESP=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X DELETE "${COOLIFY_API_URL}/api/v1/dockerimage-applications/${APP_ID}" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}")

            DEL_STATUS=$(echo "$DEL_RESP" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            DEL_BODY=$(echo "$DEL_RESP" | sed -e 's/HTTP_STATUS:.*//g')

            if [ "$DEL_STATUS" -ne 204 ]; then
              echo "‚ùå Failed to delete application. Status: $DEL_STATUS"
              echo "Response body:"
              echo "$DEL_BODY"
              exit 1
            fi

            echo "Deleted successfully."
          else
            echo "No Coolify Docker Image Application found for deletion."
          fi

      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üßπ PR preview deployment cleaned up.'
            })
