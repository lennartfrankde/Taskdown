name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [closed]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    env:
      COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
      COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
      COOLIFY_PROJECT_ID: ${{ secrets.COOLIFY_PROJECT_ID }}
      REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      PR_NUMBER: ${{ github.event.number }}
      PREVIEW_NAME: taskdown-pr-${{ github.event.number }}
      IMAGE: ${{ secrets.DOCKER_REGISTRY }}/taskdown:pr-${{ github.event.number }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push PR image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}

      - name: Create or update Coolify preview deployment
        shell: bash
        run: |
          set -euo pipefail

          echo "Fetching existing dockerimage applications for project ${COOLIFY_PROJECT_ID}..."

          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            "${COOLIFY_API_URL}/api/v1/projects/${COOLIFY_PROJECT_ID}/dockerimage-applications")

          HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          BODY=$(echo "$RESPONSE" | sed -e 's/HTTP_STATUS:.*//g')

          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to fetch dockerimage applications from Coolify API."
            exit 1
          fi

          APP_ID=$(echo "$BODY" | jq -r --arg name "$PREVIEW_NAME" '.[] | select(.name==$name) | .id // empty')

          if [ -z "$APP_ID" ]; then
            echo "App not found, creating new preview application..."

            CREATE_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "${COOLIFY_API_URL}/api/v1/projects/${COOLIFY_PROJECT_ID}/dockerimage-applications" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"${PREVIEW_NAME}\",\"image\":\"${IMAGE}\",\"preview\":true,\"forcePullImage\":true}")

            CREATE_STATUS=$(echo "$CREATE_RESPONSE" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            CREATE_BODY=$(echo "$CREATE_RESPONSE" | sed -e 's/HTTP_STATUS:.*//g')

            echo "Create HTTP Status: $CREATE_STATUS"
            echo "Create Response Body:"
            echo "$CREATE_BODY"

            if [ "$CREATE_STATUS" -ne 201 ]; then
              echo "‚ùå Failed to create Coolify preview application."
              exit 1
            fi

            echo "‚úÖ Created preview app: $PREVIEW_NAME"

          else
            echo "App found with ID $APP_ID, updating preview application..."

            UPDATE_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X PATCH "${COOLIFY_API_URL}/api/v1/dockerimage-applications/${APP_ID}" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"image\":\"${IMAGE}\",\"preview\":true,\"forcePullImage\":true}")

            UPDATE_STATUS=$(echo "$UPDATE_RESPONSE" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            UPDATE_BODY=$(echo "$UPDATE_RESPONSE" | sed -e 's/HTTP_STATUS:.*//g')

            echo "Update HTTP Status: $UPDATE_STATUS"
            echo "Update Response Body:"
            echo "$UPDATE_BODY"

            if [ "$UPDATE_STATUS" -ne 200 ]; then
              echo "‚ùå Failed to update Coolify preview application."
              exit 1
            fi

            echo "‚úÖ Updated preview app: $PREVIEW_NAME"
          fi

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployment created! Available at: https://pr-${context.issue.number}.your-domain.com`
            })

  cleanup-preview:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    env:
      COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
      COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
      PR_NUMBER: ${{ github.event.number }}
      PREVIEW_NAME: taskdown-pr-${{ github.event.number }}

    steps:
      - name: Find and delete Coolify preview deployment
        shell: bash
        run: |
          set -euo pipefail

          echo "Fetching dockerimage applications to find preview app..."

          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            "${COOLIFY_API_URL}/api/v1/projects/${COOLIFY_PROJECT_ID}/dockerimage-applications")

          HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          BODY=$(echo "$RESPONSE" | sed -e 's/HTTP_STATUS:.*//g')

          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to fetch dockerimage applications."
            exit 1
          fi

          APP_ID=$(echo "$BODY" | jq -r --arg name "$PREVIEW_NAME" '.[] | select(.name==$name) | .id // empty')

          if [ -z "$APP_ID" ]; then
            echo "No preview app found for PR #${PR_NUMBER}, nothing to delete."
            exit 0
          fi

          echo "Deleting preview app with ID $APP_ID..."

          DELETE_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X DELETE "${COOLIFY_API_URL}/api/v1/dockerimage-applications/${APP_ID}" \
            -H "Authorization: Bearer ${COOLIFY_TOKEN}")

          DELETE_STATUS=$(echo "$DELETE_RESPONSE" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          DELETE_BODY=$(echo "$DELETE_RESPONSE" | sed -e 's/HTTP_STATUS:.*//g')

          echo "Delete HTTP Status: $DELETE_STATUS"
          echo "Delete Response Body:"
          echo "$DELETE_BODY"

          if [ "$DELETE_STATUS" -ne 204 ]; then
            echo "‚ùå Failed to delete Coolify preview application."
            exit 1
          fi

          echo "‚úÖ Deleted preview app: $PREVIEW_NAME"

      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üßπ PR preview deployment has been cleaned up.`
            })
