name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [closed]

jobs:
  deploy-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push PR Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/taskdown:pr-${{ github.event.number }}

      - name: Deploy preview on Coolify
        env:
          COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
          COOLIFY_PROJECT_ID: ${{ secrets.COOLIFY_PROJECT_ID }}
          REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          set -euo pipefail

          PREVIEW_NAME="taskdown-pr-${PR_NUMBER}"
          IMAGE_TAG="pr-${PR_NUMBER}"
          IMAGE="${REGISTRY}/taskdown:${IMAGE_TAG}"

          echo "Fetching existing services for project ${COOLIFY_PROJECT_ID}..."
          SERVICES=$(curl -s -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            "${COOLIFY_API_URL}/api/v1/projects/${COOLIFY_PROJECT_ID}/services")

          echo "Response from Coolify:"
          echo "$SERVICES"

          SERVICE_ID=$(echo "$SERVICES" | jq -r --arg name "$PREVIEW_NAME" '.[] | select(.name==$name) | .id // empty')

          if [ -z "$SERVICE_ID" ]; then
            echo "Creating new Coolify preview service: $PREVIEW_NAME"
            SERVICE_ID=$(curl -s -X POST "${COOLIFY_API_URL}/api/v1/services" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"${PREVIEW_NAME}\",\"image\":\"${IMAGE}\",\"type\":\"service\",\"preview\":true,\"forcePullImage\":true}" | jq -r '.id')
          else
            echo "Updating existing Coolify preview service: $PREVIEW_NAME"
            curl -s -X PATCH "${COOLIFY_API_URL}/api/v1/services/${SERVICE_ID}" \
              -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"image\":\"${IMAGE}\",\"preview\":true,\"forcePullImage\":true}"
          fi

          echo "Triggering deployment for service $SERVICE_ID with tag $IMAGE_TAG"
          curl -s -X POST "${COOLIFY_API_URL}/api/v1/services/deploy" \
            -H "Authorization: Bearer ${COOLIFY_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"serviceId\":\"${SERVICE_ID}\",\"tag\":\"${IMAGE_TAG}\"}"

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment created! Access it at: https://pr-${context.issue.number}.serverfrank.de`
            })

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Delete Coolify preview service
        env:
          COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          set -euo pipefail

          SERVICE_NAME="taskdown-pr-${PR_NUMBER}"

          echo "Fetching service ID for $SERVICE_NAME"
          SERVICES=$(curl -s -H "Authorization: Bearer ${COOLIFY_TOKEN}" "${COOLIFY_API_URL}/api/v1/services")
          SERVICE_ID=$(echo "$SERVICES" | jq -r --arg name "$SERVICE_NAME" '.[] | select(.name==$name) | .id // empty')

          if [ -n "$SERVICE_ID" ]; then
            echo "Deleting Coolify preview service: $SERVICE_NAME (ID: $SERVICE_ID)"
            curl -s -X DELETE "${COOLIFY_API_URL}/api/v1/services/${SERVICE_ID}" -H "Authorization: Bearer ${COOLIFY_TOKEN}"
          else
            echo "No Coolify preview service found for $SERVICE_NAME. Nothing to delete."
          fi

      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ§¹ Preview deployment cleaned up after PR closure.'
            })
