name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [closed]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    env:
      COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
      COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
      COOLIFY_PROJECT_ID: ${{ secrets.COOLIFY_PROJECT_ID }}
      COOLIFY_PREVIEW_ENVIRONMENT_ID: ${{ secrets.COOLIFY_PREVIEW_ENVIRONMENT_ID }}
      REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push PR image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/taskdown:pr-${{ github.event.number }}

      - name: Deploy or update preview service in Coolify
        run: |
          set -euo pipefail

          PR_NUMBER=${{ github.event.number }}
          PREVIEW_NAME="taskdown-pr-${PR_NUMBER}"
          IMAGE="${REGISTRY}/taskdown:pr-${PR_NUMBER}"

          echo "Fetching existing services..."
          SERVICES=$(curl -s -H "Authorization: Bearer $COOLIFY_TOKEN" \
            "$COOLIFY_API_URL/api/v1/projects/$COOLIFY_PROJECT_ID/services")

          echo "Services response:"
          echo "$SERVICES"

          SERVICE_ID=$(echo "$SERVICES" | jq -r --arg name "$PREVIEW_NAME" 'if type=="array" then .[] | select(.name==$name) | .id else empty end')

          if [ -n "$SERVICE_ID" ]; then
            echo "Updating existing Coolify preview service: $PREVIEW_NAME (ID: $SERVICE_ID)"
            UPDATE_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X PATCH "$COOLIFY_API_URL/api/v1/services/$SERVICE_ID" \
              -H "Authorization: Bearer $COOLIFY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"image\":\"${IMAGE}\",\"preview\":true,\"forcePullImage\":true,\"environmentId\":\"$COOLIFY_PREVIEW_ENVIRONMENT_ID\"}")

            UPDATE_STATUS=$(echo "$UPDATE_RESPONSE" | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            UPDATE_BODY=$(echo "$UPDATE_RESPONSE" | sed -e 's/HTTP_STATUS:.*//')

            echo "Update HTTP Status: $UPDATE_STATUS"
            echo "Update Response Body:"
            echo "$UPDATE_BODY"

            if [ "$UPDATE_STATUS" -ne 200 ]; then
              echo "Error updating Coolify preview service"
              exit 1
            fi
          else
            echo "Creating new Coolify preview service: $PREVIEW_NAME"
            CREATE_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$COOLIFY_API_URL/api/v1/projects/$COOLIFY_PROJECT_ID/services" \
              -H "Authorization: Bearer $COOLIFY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"${PREVIEW_NAME}\",\"image\":\"${IMAGE}\",\"type\":\"service\",\"preview\":true,\"forcePullImage\":true,\"environmentId\":\"$COOLIFY_PREVIEW_ENVIRONMENT_ID\"}")

            CREATE_STATUS=$(echo "$CREATE_RESPONSE" | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
            CREATE_BODY=$(echo "$CREATE_RESPONSE" | sed -e 's/HTTP_STATUS:.*//')
            echo "Create HTTP Status: $CREATE_STATUS"
            echo "Create Response Body:"
            echo "$CREATE_BODY"

            if [ "$CREATE_STATUS" -ne 201 ]; then
              echo "Error creating Coolify preview service"
              exit 1
            fi
          fi
        shell: bash
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment created! Available at: https://pr-${context.issue.number}.your-domain.com`
            })

  cleanup-preview:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    env:
      COOLIFY_API_URL: ${{ secrets.COOLIFY_API_URL }}
      COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}

    steps:
      - name: Delete PR deployment in Coolify
        run: |
          set -euo pipefail
          PR_NUMBER=${{ github.event.number }}
          PREVIEW_NAME="taskdown-pr-${PR_NUMBER}"

          # Find the service id first
          SERVICES=$(curl -s -H "Authorization: Bearer $COOLIFY_TOKEN" "$COOLIFY_API_URL/api/v1/projects/${{ secrets.COOLIFY_PROJECT_ID }}/services")
          SERVICE_ID=$(echo "$SERVICES" | jq -r --arg name "$PREVIEW_NAME" 'if type=="array" then .[] | select(.name==$name) | .id else empty end')

          if [ -n "$SERVICE_ID" ]; then
            echo "Deleting Coolify preview service: $PREVIEW_NAME (ID: $SERVICE_ID)"
            curl -s -X DELETE "$COOLIFY_API_URL/api/v1/services/$SERVICE_ID" \
              -H "Authorization: Bearer $COOLIFY_TOKEN"
          else
            echo "No preview service found to delete."
          fi
        shell: bash
      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ§¹ PR preview deployment has been cleaned up.`
            })
